name: Publish

on:
  push:
    branches:
      - main
      - next

  workflow_dispatch:
    # Remove the branches section as it's not valid
    # workflow_dispatch allows manual triggering without branch restrictions

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  actions: write
  issues: write
  pull-requests: write

jobs:
  tag:
    outputs:
      kit_tag: ${{ steps.set_kit_tag.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - name: Echo all available variables
        run: |
          echo "All available variables:"
          echo "-------------------------"
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_WORKFLOW: ${{ github.workflow }}"
          echo "GITHUB_ACTION: ${{ github.action }}"
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_WORKSPACE: ${{ github.workspace }}"
          echo "GITHUB_HEAD_REF: ${{ github.head_ref }}"
          echo "GITHUB_BASE_REF: ${{ github.base_ref }}"
          echo "GITHUB_SERVER_URL: ${{ github.server_url }}"
          echo "GITHUB_API_URL: ${{ github.api_url }}"
          echo "GITHUB_GRAPHQL_URL: ${{ github.graphql_url }}"
          echo "RUNNER_OS: ${{ runner.os }}"
          echo "RUNNER_TEMP: ${{ runner.temp }}"
          echo "RUNNER_TOOL_CACHE: ${{ runner.tool_cache }}"

      # kit-action will automatically actions/checkout and actions/setup-node
      - name: Set kit_tag
        id: set_kit_tag
        uses: johnlindquist/kit-action@main
        with:
          script: set-kit-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug - Echo kit_tag
        run: |
          echo "kit_tag from step output: ${{ steps.set_kit_tag.outputs.result }}"

      - name: Debug - List all step outputs
        run: |
          echo "All step outputs:"
          echo "${{ toJson(steps) }}"

  semantic:
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      semantic_version: ${{ steps.semantic.outputs.new_release_version }}

    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Debug - Echo kit_tag from previous job
        run: |
          echo "kit_tag from needs.tag.outputs: ${{ needs.tag.outputs.kit_tag }}"

      - name: Debug - List all job outputs
        run: |
          echo "All job outputs:"
          echo "${{ toJson(needs) }}"

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic # Need an `id` for output variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo kit-action version
        run: |
          echo "Using johnlindquist/kit-action@${{ needs.tag.outputs.kit_tag }}"
          echo "Release Channel: ${{ steps.semantic.outputs.new_release_channel }}"
          echo "Previous Release Channel: ${{ steps.semantic.outputs.last_release_version }}"
          echo "Semantic Version: ${{ steps.semantic.outputs.new_release_version }}"

      - name: Create Release ${{ steps.semantic.outputs.new_release_version }}
        id: create_release
        uses: johnlindquist/kit-action@main
        with:
          script: create-release ${{ steps.semantic.outputs.new_release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: publish-${{ needs.semantic.outputs.semantic_version }}-(${{ matrix.platform }}-${{ matrix.arch }})
    needs: [tag, semantic]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            platform: win32
            arch: arm64
          - os: script-kit-ubuntu-latest-arm64
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-13
            platform: mac
            arch: x64
          - os: macos-13
            platform: mac
            arch: arm64
    steps:
      - name: Debug - Echo kit_tag from previous jobs
        run: |
          echo "kit_tag from needs.tag.outputs: ${{ needs.tag.outputs.kit_tag }}"

      - name: Debug - List all job outputs
        run: |
          echo "All job outputs:"
          echo "${{ toJson(needs) }}"

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node, pnpm and Yarn
        uses: actions/setup-node@v4

      - name: Write the Semantic Version to package.json version property for main
        if: needs.tag.outputs.kit_tag == 'latest'
        uses: johnlindquist/kit-action@main
        with:
          script: update-package-version ${{ needs.semantic.outputs.semantic_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Nix - Write the current branch to a releaseChannel env var
        if: ${{ matrix.os != 'windows-latest' && matrix.os != 'windows-2022' }}
        run: |
          echo "RELEASE_CHANNEL=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Windows - Write the current branch to a releaseChannel env var
        if: ${{ matrix.os == 'windows-latest' || matrix.os == 'windows-2022' }}
        run: |
          echo "RELEASE_CHANNEL=$(git rev-parse --abbrev-ref HEAD)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download kenv main
        if: needs.tag.outputs.kit_tag == 'latest'
        uses: johnlindquist/kit-action@main
        with:
          script: download-kenv ${{ env.RELEASE_CHANNEL }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Assets main
        if: needs.tag.outputs.kit_tag == 'latest'
        uses: johnlindquist/kit-action@main
        with:
          script: create-assets ${{ needs.semantic.outputs.semantic_version}} ${{ matrix.os }} ${{ matrix.arch }} ${{ needs.semantic.outputs.release_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies, set PKG_CONFIG_PATH and log debugging info (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "Starting dependency installation..."
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxkbfile-dev libxtst-dev make gcc libpng++-dev g++-10

          echo "Setting g++ alternatives..."
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
          sudo update-alternatives --set g++ /usr/bin/g++-10
          echo "g++ version:"
          g++ --version

          # Set PKG_CONFIG_PATH based on architecture.
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"
          else
            export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"
          fi
          echo "PKG_CONFIG_PATH is set to: $PKG_CONFIG_PATH"

          echo "Verifying that pkg-config exists..."
          command -v pkg-config || { echo "ERROR: pkg-config not found"; exit 1; }
          echo "pkg-config version: $(pkg-config --version)"

          echo "Listing pkg-config directory contents..."
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ls -l /usr/lib/aarch64-linux-gnu/pkgconfig || true
          else
            ls -l /usr/lib/x86_64-linux-gnu/pkgconfig || true
          fi

          echo "Searching for x11.pc and xkbfile.pc files..."
          X11_PC=$(find /usr -name "x11.pc" 2>/dev/null)
          if [ -z "$X11_PC" ]; then
            echo "ERROR: x11.pc not found!"
            exit 1
          else
            echo "Found x11.pc at: $X11_PC"
          fi

          XKBFILE_PC=$(find /usr -name "xkbfile.pc" 2>/dev/null)
          if [ -z "$XKBFILE_PC" ]; then
            echo "ERROR: xkbfile.pc not found!"
            exit 1
          else
            echo "Found xkbfile.pc at: $XKBFILE_PC"
          fi

          echo "Listing available pkg-config packages for x11 and xkbfile:"
          pkg-config --list-all | grep -E 'x11|xkbfile' || echo "No matching pkg-config packages found."

      - name: Debug - Pre-dependency removal state
        if: needs.tag.outputs.kit_tag == 'latest'
        shell: bash
        run: |
          echo "=== Debug: Pre-removal state ==="
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "package.json optionalDependencies:"
          if command -v jq &> /dev/null; then
            cat package.json | jq '.optionalDependencies'
          else
            node -e "console.log(JSON.stringify(require('./package.json').optionalDependencies, null, 2))"
          fi
          echo "node_modules directory (first 30 entries):"
          if [ -d node_modules ]; then
            ls -la node_modules 2>/dev/null | head -30 || echo "Failed to list node_modules"
          else
            echo "node_modules directory not found"
          fi
          echo "=== End pre-removal state ==="

      - name: Set Optional Dependencies Based on Platform and Architecture
        id: set-optional-dependencies
        if: needs.tag.outputs.kit_tag == 'latest'
        uses: johnlindquist/kit-action@main
        with:
          script: set-optional-dependencies ${{ matrix.platform }} ${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debug - Post-dependency removal state
        if: always() && needs.tag.outputs.kit_tag == 'latest'
        shell: bash
        run: |
          echo "=== Debug: Post-removal state ==="
          echo "Step outcome: ${{ steps.set-optional-dependencies.outcome }}"
          echo "package.json optionalDependencies:"
          if command -v jq &> /dev/null; then
            cat package.json | jq '.optionalDependencies' || echo "Failed to read package.json"
          else
            node -e "console.log(JSON.stringify(require('./package.json').optionalDependencies, null, 2))" || echo "Failed to read package.json"
          fi
          echo "node_modules directory (first 30 entries):"
          if [ -d node_modules ]; then
            ls -la node_modules 2>/dev/null | head -30 || echo "Failed to list node_modules"
          else
            echo "node_modules directory not found"
          fi
          echo "pnpm info:"
          echo "- pnpm version: $(pnpm --version)"
          echo "- pnpm root: $(pnpm root || echo 'Failed to get pnpm root')"
          echo "- pnpm bin: $(pnpm bin || echo 'Failed to get pnpm bin')"
          echo "- pnpm store path: $(pnpm store path || echo 'Failed to get store path')"
          echo "pnpm store status:"
          pnpm store status || echo "Failed to get pnpm store status"
          echo "=== End post-removal state ==="

      - name: Publish windows x64
        if: matrix.platform == 'win32' && matrix.arch == 'x64'
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: x64
          ELECTRON_BUILD_PLATFORM: win32
        run: |
          pnpm i
          cat ./package.json
          pnpm vite-prebuild
          pnpm exec kit ./build.ts win x64 always

      - name: Publish windows arm64
        if: matrix.platform == 'win32' && matrix.arch == 'arm64'
        run: |
          pnpm i
          pnpm exec kit remove-tick
          pnpm vite-prebuild
          pnpm exec kit ./build.ts win arm64 always
        env:
          # These values are used for auto updates signing
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: arm64
          ELECTRON_BUILD_PLATFORM: win32

      - name: Publish linux x64
        if: matrix.platform == 'linux' && matrix.arch == 'x64'
        env:
          # These values are used for auto updates signing
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: x64
          ELECTRON_BUILD_PLATFORM: linux

        run: |
          echo "=== LINUX X64 BUILD START ==="
          node --version
          pnpm --version
          pnpm i

          echo "=== QUICK KIT CHECK ==="
          test -d "node_modules/@johnlindquist/kit/bin" && echo "✅ Kit bin exists" || echo "❌ Kit bin missing"
          test -x "node_modules/@johnlindquist/kit/bin/kit" && echo "✅ Kit executable" || echo "❌ Kit not executable"
          ls -la node_modules/@johnlindquist/kit/bin/kit || echo "❌ Kit binary details unavailable"

          cat ./package.json
          pnpm vite-prebuild
          pnpm exec kit ./build.ts linux x64 always

      - name: Publish linux arm64
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        env:
          # These values are used for auto updates signing
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: arm64
          ELECTRON_BUILD_PLATFORM: linux

        run: |
          echo "=== LINUX ARM64 BUILD DIAGNOSTICS ==="
          echo "Platform: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "OS: ${{ matrix.os }}"

          sudo apt-get install ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
          export USE_SYSTEM_FPM=true

          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Current directory: $(pwd)"

          echo "=== INSTALLING DEPENDENCIES ==="
          pnpm i

          echo "=== POST-INSTALL KIT DIAGNOSTICS ==="
          echo "Checking for @johnlindquist/kit installation..."
          if [ -d "node_modules/@johnlindquist/kit" ]; then
            echo "✅ @johnlindquist/kit directory found"
            echo "Kit package contents:"
            ls -la node_modules/@johnlindquist/kit/ | head -20

            echo "Kit bin directory:"
            if [ -d "node_modules/@johnlindquist/kit/bin" ]; then
              echo "✅ Kit bin directory exists"
              ls -la node_modules/@johnlindquist/kit/bin/

              echo "Kit binary file details:"
              for file in node_modules/@johnlindquist/kit/bin/*; do
                if [ -f "$file" ]; then
                  echo "File: $file"
                  echo "  Exists: $(test -f "$file" && echo "yes" || echo "no")"
                  echo "  Executable: $(test -x "$file" && echo "yes" || echo "no")"
                  echo "  Size: $(stat -c%s "$file")"
                  echo "  Permissions: $(stat -c%a "$file")"
                  echo "  Detailed permissions: $(ls -la "$file")"
                fi
              done
            else
              echo "❌ Kit bin directory missing!"
            fi

            echo "Kit package.json check:"
            if [ -f "node_modules/@johnlindquist/kit/package.json" ]; then
              echo "✅ package.json exists"
              echo "Package name: $(grep '"name"' node_modules/@johnlindquist/kit/package.json)"
              echo "Package version: $(grep '"version"' node_modules/@johnlindquist/kit/package.json)"
              echo "Bin section:"
              grep -A 5 '"bin"' node_modules/@johnlindquist/kit/package.json || echo "No bin section found"
            else
              echo "❌ package.json missing!"
            fi
          else
            echo "❌ @johnlindquist/kit directory not found!"
            echo "Available packages in node_modules:"
            ls -la node_modules/ | grep johnlindquist || echo "No @johnlindquist packages found"
            echo "All node_modules contents:"
            ls -la node_modules/ | head -20
          fi

          echo "=== PNPM EXEC ENVIRONMENT ==="
          echo "PATH: $PATH"
          echo "Which pnpm: $(which pnpm)"
          echo "pnpm root: $(pnpm root)"
          echo "pnpm bin location: $(pnpm bin)"

          echo "Checking if kit is available via pnpm exec..."
          pnpm exec which kit || echo "❌ 'which kit' via pnpm exec failed"
          pnpm exec kit --help > /dev/null 2>&1 && echo "✅ kit --help succeeded" || echo "❌ kit --help failed with exit code $?"

          echo "=== ATTEMPTING REMOVE-TICK ==="
          pnpm exec kit remove-tick

          echo "=== CONTINUING WITH BUILD ==="
          cat ./package.json
          pnpm vite-prebuild
          which npm
          pnpm --version
          pnpm exec kit ./build.ts linux arm64 always

      - name: Write Apple API Key to ~/.private_keys
        run: |
          mkdir -p ~/.private_keys
          echo '${{ secrets.APPLE_API_KEY }}' > ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Publish mac x64
        if: matrix.platform == 'mac' && matrix.arch == 'x64'
        env:
          # These values are used for auto updates signing
          APPLE_API_KEY: ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: x64
          ELECTRON_BUILD_PLATFORM: darwin
          DEBUG: electron-notarize

        # Wait 10 minutes to start to avoid signing overlap issues
        run: |
          sleep 600
          pnpm i
          pnpm vite-prebuild
          pnpm exec kit ./build.ts mac ${{ matrix.arch }} always

      - name: Publish mac arm64
        if: matrix.platform == 'mac' && matrix.arch == 'arm64'
        env:
          # These values are used for auto updates signing
          APPLE_API_KEY: ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILD_ARCH: arm64
          ELECTRON_BUILD_PLATFORM: darwin
          DEBUG: electron-notarize
        run: |
          pnpm i
          pnpm vite-prebuild
          pnpm exec kit ./build.ts mac ${{ matrix.arch }} always

      - name: Merge latest-mac.yml and latest-mac-arm64.yml
        if: matrix.platform == 'mac'
        # Just something to keep an eye on in case kit-action changes.
        uses: johnlindquist/kit-action@main
        with:
          script: merge-mac-latest-yml script-kit kitapp ${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
