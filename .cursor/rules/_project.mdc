---
description:
globs:
alwaysApply: false
---
# Script Kit Project Guide

## Project Overview
Script Kit is an Electron-based application that enables users to create and run automation scripts. The project is organized into multiple workspaces using pnpm.

## Project Structure

### Main Workspaces
- **kit/** - Core SDK and libraries ([package.json](mdc:kit/package.json))
  - Contains the main Script Kit API and utilities
  - Provides global functions and types for scripts
  
- **app/** - Electron application ([package.json](mdc:app/package.json))
  - Main desktop application built with Electron
  - React-based UI with Monaco Editor integration
  - Handles script execution and system integration

- **.kenv/** - User environment directory
  - Contains user scripts, configuration, and data
  - Local development environment

- **.kit/** - Runtime and installation files
  - Node.js binaries and dependencies
  - System-specific assets and configurations

## Development Commands

### Core Development Scripts (from app/)
```bash
# Start development server with hot reload
pnpm dev

# Run with Vite development server
pnpm vite-dev

# Build the application
pnpm build

# Run tests
pnpm test

# Format code
pnpm format:check  # Check formatting
pnpm format:fix    # Fix formatting issues

# Package application
pnpm package:mac:arm64  # Build for Mac ARM64
```

### Build and Installation
```bash
# Build and install locally (Mac)
pnpm build-and-install:mac

# Build and install locally (Windows)
pnpm build-and-install:windows:x64

# Pre-build for production
pnpm vite-prebuild

# Rebuild native dependencies
pnpm rebuild
pnpm rebuild-node-pty  # Rebuild node-pty specifically
```

### Testing and Development Setup
```bash
# Run with separate setup directories
pnpm kit-setup  # Uses ~/.kit-setup, ~/.kenv-setup, ~/.knode-setup

# Clear cache
pnpm clear-cache

# Run benchmarks
pnpm bench

# Generate coverage report
pnpm coverage
```

## Key Libraries and Dependencies

### Core Framework
- **Electron** ([electron](https://www.electronjs.org/)) - Desktop application framework
- **React 19** ([react](https://react.dev/)) - UI framework
- **TypeScript** ([typescript](https://www.typescriptlang.org/)) - Type-safe JavaScript

### Build Tools
- **Vite** ([vite](https://vitejs.dev/)) - Fast build tool and dev server
- **electron-vite** - Vite integration for Electron
- **electron-builder** - Application packaging and distribution
- **pnpm** - Fast, disk space efficient package manager

### UI Components
- **Monaco Editor** ([monaco-editor](https://microsoft.github.io/monaco-editor/)) - Code editor (VS Code's editor)
- **@monaco-editor/react** - React wrapper for Monaco
- **Tailwind CSS** ([tailwindcss](https://tailwindcss.com/)) - Utility-first CSS framework
- **@heroicons/react** - Beautiful hand-crafted SVG icons
- **Framer Motion** ([framer-motion](https://www.framer.com/motion/)) - Animation library

### State Management
- **Jotai** ([jotai](https://jotai.org/)) - Primitive and flexible state management
- **Valtio** ([valtio](https://github.com/pmndrs/valtio)) - Proxy-based state management

### Terminal and System Integration
- **@xterm/xterm** - Terminal emulator for web
- **node-pty** - Fork pseudoterminals (PTYs) in Node.js
- **@jitsi/robotjs** - Desktop automation (mouse, keyboard, screen)
- **@johnlindquist/kit** - Core Script Kit SDK

### Development Tools
- **Biome** ([biome](https://biomejs.dev/)) - Fast formatter and linter
- **Vitest** ([vitest](https://vitest.dev/)) - Fast unit test framework
- **Jest** - Testing framework (legacy tests)
- **@testing-library/react** - React testing utilities

### Utilities
- **axios** - HTTP client
- **date-fns** - Modern JavaScript date utility library
- **lodash-es** - Utility library (ES modules)
- **nanoid** - Tiny, secure URL-safe unique ID generator
- **chokidar** - File system watcher
- **globby** - User-friendly glob matching

### Platform-Specific (Optional Dependencies)
- **@johnlindquist/mac-clipboard-listener** - macOS clipboard monitoring
- **@johnlindquist/mac-frontmost** - macOS frontmost app detection
- **@johnlindquist/node-window-manager** - Cross-platform window management
- **node-mac-permissions** - macOS permissions API
- **uiohook-napi** - Global keyboard and mouse hooks

## Project Configuration Files

### Build Configuration
- [electron.vite.config.ts](mdc:app/electron.vite.config.ts) - Vite configuration for Electron
- [tsconfig.json](mdc:app/tsconfig.json) - TypeScript configuration
- [tailwind.config.js](mdc:app/tailwind.config.js) - Tailwind CSS configuration
- [biome.json](mdc:app/biome.json) - Code formatting and linting rules

### Package Management
- [package.json](mdc:app/package.json) - Main application dependencies and scripts
- [pnpm-lock.yaml](mdc:app/pnpm-lock.yaml) - Locked dependency versions
- [.npmrc](mdc:app/.npmrc) - npm/pnpm configuration

## Development Workflow

1. **Setup**: Clone repo and install dependencies with `pnpm install`
2. **Development**: Run `pnpm dev` for hot-reload development
3. **Testing**: Use `pnpm test` for unit tests, `pnpm bench` for benchmarks
4. **Building**: Use `pnpm build` to create production builds
5. **Formatting**: Run `pnpm format:fix` before committing

## Key Directories

### Application Source (app/src/)
- **main/** - Electron main process code
- **renderer/** - React UI code
- **preload/** - Electron preload scripts
- **shared/** - Shared utilities and types

### SDK Source (kit/src/)
- **api/** - Public API endpoints
- **core/** - Core functionality
- **cli/** - Command-line interface
- **types/** - TypeScript type definitions
- **utils/** - Utility functions

## Environment Variables
The project uses `.env` files for configuration. Key variables are loaded via the `dotenv` package.

## Node Version
Required Node.js version: **22.9.0** (specified in engines field)
