diff --git a/src/api/tool.ts b/src/api/tool.ts
index 0000000..1111111 100644
--- a/src/api/tool.ts
+++ b/src/api/tool.ts
@@ -1,6 +1,4 @@
 import { Channel } from "../core/enum.js"
 import type { ParameterConfig, ToolConfig } from "../types/globals"
-import { global } from "../api/global.js"
-import { arg } from "./app.js"
 
 // Store tool definitions for MCP registration
 export const toolDefinitions = new Map<string, ToolConfig>()
@@ -90,9 +88,9 @@ async function parseCliParameters<T>(config: ToolConfig<T>): Promise<T | null> {
   
   // Apply defaults for missing parameters
   if (config.parameters) {
-    for (const [key, param] of Object.entries(config.parameters)) {
-      if (!(key in params) && param.default !== undefined) {
-        params[key] = param.default
+    for (const [key, param] of Object.entries(config.parameters) as Array<[string, ParameterConfig]>) {
+      if (!(key in params) && param.default !== undefined) {
+        params[key] = param.default
       }
     }
   }
@@ -110,40 +108,40 @@ async function promptForParameters<T>(config: ToolConfig<T>): Promise<T> {
   // Prompt for each parameter
   for (const [name, param] of Object.entries(config.parameters) as Array<[string, ParameterConfig]>) {
     if (param.type === "string" && param.enum) {
       // Use select for enums
-      result[name] = await arg({
+      result[name] = await global.arg({
         placeholder: param.description || `Select ${name}`,
         choices: param.enum.map(value => ({ name: String(value), value }))
       })
     } else if (param.type === "number") {
       // Use number input
-      const value = await arg({
+      const value = await global.arg({
         placeholder: param.description || `Enter ${name}`,
         type: "text" // Will validate as number
       })
       result[name] = Number(value)
     } else if (param.type === "boolean") {
       // Use toggle or select
-      result[name] = await arg({
+      result[name] = await global.arg({
         placeholder: param.description || `${name}?`,
         choices: [
           { name: "Yes", value: true },
           { name: "No", value: false }
         ]
       })
     } else if (param.type === "array") {
       // For arrays, prompt for comma-separated values
-      const value = await arg({
+      const value = await global.arg({
         placeholder: param.description || `Enter ${name} (comma-separated)`
       })
       result[name] = value.split(",").map(v => v.trim())
     } else {
       // Default text input
-      result[name] = await arg({
+      result[name] = await global.arg({
         placeholder: param.description || `Enter ${name}`
       })
     }
     
     // Apply defaults if no value provided
-    if (result[name] === undefined && param.default !== undefined) {
-      result[name] = param.default
+    if (result[name] === undefined && (param as any).default !== undefined) {
+      result[name] = (param as any).default
     }
   }
   
@@ -200,7 +198,10 @@ export function parametersToJsonSchema(parameters?: Record<string, ParameterConf
     }
     
     if (param.type === "array" && param.items) {
-      schema.items = parametersToJsonSchema({ item: param.items }).properties.item
+      // For array items, directly convert the item parameter config
+      schema.items = {
+        type: param.items.type,
+        description: param.items.description
+      }
     }
     
     if (param.type === "object" && param.properties) {